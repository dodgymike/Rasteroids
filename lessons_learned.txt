Images:
http://www.fotosearch.com/IMZ145/sha0002/
http://galacticfool.com/asteroids-meteors-comets/

Gosu:
https://github.com/jlnr/gosu/wiki/Ruby-Tutorial
https://github.com/jlnr/gosu/wiki/Basic-Concepts
- c bindings
  - segfaults
  - image loading not reliable
- asteroids not appearing
  - don't forget to check the image rv
- images
  - Gimp 
    - use RGB bmp - jpg convertor doesn't work with transparent backgrounds
- not sure about keyboard handling
  - because we check for key down in the event loop, and not key down events, we get multiple 'key-presses'

Chipmunk:
6.0.1
library install: http://wiki.slembcke.net/main/published/Chipmunk
ruby lib: https://github.com/jlnr/gosu/wiki/Ruby-Chipmunk-Integration

  Ubuntu:
	install GLUT, libxmu, cmake
	- cmake .
	- hack Demo/Buoyancy.c line 132
	- sudo gem install chipmunk

- documentation for ruby bindings is not great
  - https://github.com/jlnr/gosu/blob/master/examples/ChipmunkIntegration.rb (for good examples of gosu/chipmunk integration)
  - look at c docs
  - docs: http://files.slembcke.net/chipmunk/release/ChipmunkLatest-Docs/
  - better docs: http://beoran.github.com/chipmunk/

- collisions
  - 'shapes' are crucial - define collision boundaries
  - circle 'shapes' are quite usable, poly 'shapes' require some thinking
  - don't forget to assign a shape 'type', otherwise collision functions won't work
  - always get two collision events
    - possibly need to move objects apart manually?

- stuff I figured out/dodgy naming conventions
  - body.a is object rotation angle in radians
  - body.v is the velocity vector
  - body.p is the position
  - vector manipulation helpers difficult to use/figure out due to poor documentation


Drb:
built-in

- really simple
- follow http://segment7.net/projects/ruby/drb/introduction.html
- not sure about chipmunk classes across drb - maybe use drbundumped?

- first attempt seriously slow
- "0x3fe7ac37fc98 is recycled object (RangeError)"
  - http://627nm.blogspot.com/2009/04/drb-and-rangeerror.html
  - passing a drb object into a drb 'service call' causes major pain
    - if that object adds itself to anything on the server side, its lifecycle is screwed
    - bullets have players, call player.shoot creates a bullet with the player as an attribute
      which is actually a drb *remote* object and is not valid/accessible locally :/
- while developing, *always* use a fixed URL
- Passing large objects around is a bad idea, possibly try DRbUndumped
  - I wrapped the required data and passed the wrapper objects to front end

General:
- console output is the enemy of performance - especially pp in the event loop
- try your best to keep game logic separate from display logic for multiplayer games
- Expect occasional segfaults - probably chipmunk

Stuff I didn't get to:
- http://rubydoc.info/github/ippa/chingu/master/frames OpenGL 2D?
- proper setup of mass/moment
- playing with gravity
- proper testing
  - it's *difficult*
  - no excuses, but lots of glue required

